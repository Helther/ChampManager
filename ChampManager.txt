##Championship manager 2020


todo:

продумать до конца класс дб
продумать как синхронизировать файлы модов с дб - хранить их в дб
    через тип BLOB, предварительно переведя в бинарный вид
продумать дб и гуй для просмотра отчетов по результатам гонок
    запись логов в дб
    отображение результатов в гуи в табличном виде через модел-представление
    возможность посмотреть подродную инфу по каждому кругу гонки
    комбинация гоночного уикенда из макс. трех логов, путем вызова диалога добаления гран-при
    проверки на соответствие логов
    функции добавления, удаления логов выбрванных и полностью
    сделать отдельные окна для подробностей уикэнда

при запуске: создать/найти дб,таблицу с отчетами
    отобразить найденные отчеты
Гуи функции:
    добавить гран-при
    удалить выбранные отчеты
    посмотреть инфу по кругам
    фильтры или сортировка отображения результатов через класс QSqlTableModel




суть:
        приложение для ведения чемпионата в течении нескольких сезонов,
	учета и записи статистики результатов выступлений 

задачи:
	парсинг логов гонок и квалификаций и запись в базу данных в виде таблиц с результатами
	расчет статистики гонок для гонщиков и команд для дальнейшей обработки
	реализация эвентов в разные моменты чемпионата
		(приход спонсора, апгрейд\замена авто или пилота, смена регламента)
	нахождение и парсинг файлов мода с инфой о командах и машинах для:
		развитие команд(шасси и моторов) по ходу сезона и между, учет успехов, бюджета
			расчет скорости исслед\произв, степени улучшения\ухудш деталей
			реализация фиолософий развития со своими + и -
		развитие гонщиков
			изменеие статов с интервалами времени и при особых случаях
			учет возраста, текущих статов, успехов относ. ожиданий команды\напарника
		трансфер/приход-уход гонщиков между командами, в зависимости от
			желания гонщика, его успехов, применение машинного обучения
			для классификации возможных переходов гонщиков
		трансфер поставщиков моторов
			учет исторических факторов, успехов своих, конкурентов на таких же
			и других моторах, буджет\цена
		приход-уход команд и поставщиков моторов(под вопросом)
	реализация карьеры напротяжении нескольких сезонов:
		учет успехов игрока
		учет ожиданий команд на сезон и степени соответствия им пилотов
		

Основные механики ф1 2019:

	Разработка болидов
	Репутация игрока с командами
	трансферы гонщиков
	износ деталей
	райвал гонщики
	контракты с гонщиками
	
Механики проекта:
	Динамический чемпионат
		походу сезона будут происходить псевдослучайные эвенты
		которые напрямую  не относятся к развитию машины или гонщика
		Например: изменение бюджета команды, философии развития команды,
		целей команды на сезон, изменение регламента на след сезон, подписание/
		расторжение контрактов, смена поставщика двигателей, перенос фокуса
		на след сезон
		
		после каждой гонки будут обновляться характеристики гонщиков,
		отношения, решаться вопросы разработки болида
		
	разработка болида/мотора
		изменение характеристик аеродинамики шасси и мощности двигла
		
		что влияет на это:
		бюджет на разработку
		талант состава команды
		философия развития
		фокус на текущем сезоне или на след
		текушяя степень разработанности данного регламента
			и исходы предыдущих исследований влияет на вероятность успеха детали
		сессии практики
			чем больше стабильно быстрых кругов пройдено за практику
			тем больше очков исследований
			
		основная разработка двигла производится самим поставщиком
		на это влияет:
			философия, колво клиентов, текущее соотношение сил
			
		Параметры улучшения
			стоимость
			качество
			вероятность
		Типы улучшений болида
			мал. - качество-,скорость+,
			средн. - всё сбалансировано
			макс. - качество+,скорость-
			
		Философии разработки
			традиционная
				+вероятность
				-качество
			радикальная
				-вероятность
				+качество
				
		Категории деталей шасси
			передн. крыло
			задн. крыло
			диффузор и пантоны
			радиаторы
			охл. тормозов
			
	развитие гонщиков
			плановое улучшение/ухудшение каждые пол года по полученному опыту,
			зависит от колва сезонов в ф1, возраста, таланта
			
			Внеплановое изменение параметров. 
			После аварий и сходов незначительное снижение статов
			После отличных результатов для команды повышение
			
			Развитие происходит согласно пресетам с млаой рандомизацией
			в обе стороны
			Пресеты:
				баланс
				агрессия+скорость+нестабильность
				хороший старт+стабильность
				
	
	репутация гонщиков и команд
		сетка отношений гонщиков между другими гонщиками и командами
		подумать над реализацией
		что влияет на:
			начальный модификатор при создании гонщика
			при аварии со своей командой
			столкновения на трассе с гонщиком и его командой
			переход между командами
			
		на что влияет:
			на вероятнсть перехода в команду с другим гонщиком в ней
		
	контракты и трансферы гонщиков
		контракты обновляются ежегодно
		после заверешения сезона команды, начиная с сильнейшей, проверяют
		все ответы от гонщиков, находят подходящие требованиям варианты
		определют 2 лучших и выбирают рандомно
		гонщики лишенные мест автоматически предлагают всем оставшимся 
		командам с проверкой только бюджета и уменьшением з/п
		Инициация:
			команда когда их гонщик не выполняет поставленной цели
			гонщик если команда не выполнена его цель
			(очки, подиумы, победы, чемпионаты)
			гонщик предлагает командам выше его команды в кк
		Переговоры
			когда было сделано предложение происходит проверка требований
			команда не может взять если их бюджет меньше его з/п, где
			бюджет - запас на статы двух гонщиков, з/п это функция 
			суммы успехов гонщика
			гонщик сам не прейдет в команду на две позиции ниже его команды
			когда требования выполнены 
			выбираются 2 гонщика с лучшей репутацией, затем с большей 
			з/п и выбирается случайно

	Подготовка к индивидуальной гонке командами
		возможность задавать настройки для треков с выс/низк прижимной силой
		по завершении гонки во время обновлений вопрос како трэк следующий	
	

		
	
Сущности:
	гонщик
		личностные параметры(характер) влияет на выбор трансфера
		Имя
		имя команды
		возраст
		прошлые достижения
		число сезонов в ф1
		талант
		
	команда
		бюджет - главный ресурс команды. На каждый сезон устанавливается
		определнный бюджет в зависимости от:
			положения в кубке в прошлом
			спонсоров
			ожиданий
			
		он делится на:
			гонщиков
			талант
			разработку
			??аварии и техн. проблемы
			
		при переходе или смене фокуса на след сезон, остатки бюджета 
		прибавляются
		
		философия развития болида
		состав пилотов
		
		структура разработки болида
			мод. качества деталей
				талант
				возраст регламента
				положение в кубке
			мод. вероятности успеха
				прошлые успехи
				талант
				возраст регламента
			мод. скорости создания
				успехи в практике
		
	игрок
		аналогично гонщику +
		
	производитель двигла
		философия
		колво клиентов
		текущее соотношение сил
	
Реализация		
классы:
файл со структурами данных инклюдится в файл парсер и дб манагер

fileparser
    функции
            открыть xml для чтения, txt для чтения или записи
            считать открытый файл на предмет нужной инфы
            записать в тхт нужные данные в нужное место
            форматирование считанных данных в удобный для записи в бд тип данных

            xml,veh,rcd,hdv
            открыть-считать-закрыть
                ошибки: не существует, не открывается, неверный тип, неполные данные
            veh,rcd,hdv
            открыть-бэкап-записать-закрыть
                ошибки: те же + не пишется
            как и в каком виде передать данные файлов дальше?
    методы
            //читает по файлу в поисках последнего элемента аргумента
            //попает его, добавляет в мапу, читает дальше, пока колво шагов не превысит
            //начальный размер аргумента,не находит - ошибка
            public parseFile(vector(nameString))
                return map(name,value)

            //изменить заданные поля в заданном файле
            //аналогично парсу искать поля вектора и писать в них значения аргумента
            public bool writeModFile(vector(pair(name,value)))
                если не тру то восстановить бэкап
            пропарсить последовательно поля в файлах, записать в стринги, текстстримом перевести в нужный тип
        private:
            //объединить их
            LogInfo parseLog
            parseVEH //driver and team info
            parseHDV //car perfomance info
            parseRCD //driver perfomance info
            parseModFile()

            FileType getLogType
            bool backupFIle(backup_path, file_path)
            bool openFile


    dataType
        enum class FileType
        struct DriverInfo
        struct LogInfo

    data
        QString fileName;
        QString fileData;
        FileType fileType;
DBHelper
    содержит
        объект дб
    функции
        инициализация карьеры дб
        удаление профиля карьеры(дб)
        сброс карьеры
        инициализация таблиц
        запись/чтение строк в дб
            указать таблицу, айди(имя) нужной строки и столбец
        запись в таблицы после чтения файлов
            отдельные методы для каждого типа файла
        доступ к объекту дб

    базы:
        карьера
    таблицы:
        профиль гг, настройки, правила(кол-во ГП), мод
        сезоны карьеры
            столбцы: айди гонки сезона, айди результаты
        гран-при сезона
            столбцы: ключ, айди сезон, айди результаты сессий, трасса, круги
        результаты гонки
            столбцы: ключ, позиция, айди имя, всё остальное из драйвер структуры
        результаты сезона
            столбцы: ключ, позиция, айди гонщики, очки
        команды
            столбцы: ключ имя, класс, имя скин файла, айди мотор, бюджет, философия, остальное из HDV
        гонщики
            столбцы: ключ имя, айди команда, возраст, прошлые достижения, число сезонов в ф1, талант, параметры из RCD
        поставщики моторов
            столбцы: ключ имя, философия, кол-во клиентов, параметры движка
            "create table career
            (
                season_fid int[] not null,
                PlayerFile varchar(30),
                Mod varchar(40),
                Rules,//todo
                Settings,//todo
                constraint k_season_id_id foreign key (season_fid)
                            references race_results(res_id)
            )"
            "create table seasons
            (
                season_id int not null,
                //race_fid int[] not null,
                name varchar(40),
                constraint k_season_id primary key (season_id),
                //constraint k_race_id foreign key (race_fid)
                            references races(race_id)
            )"
            "create table races
            (
                race_id int not null,
                pract_res_fid int not null,
                quali_res_fid int not null,
                race_res_fid int not null,
                seasons_fid int not null,
                TrackVenue varchar(40),
                RaceLaps int,
                constraint k_race_id primary key (race_id),
                constraint pract_res_id foreign key (pract_res_fid)
                            references race_results(res_id)
                constraint quali_res_id foreign key (quali_res_fid)
                            references race_results(res_id)
                constraint race_res_id foreign key (race_res_fid)
                            references race_results(res_id)
                constraint seasons_id foreign key (seasons_fid)
                            references seasons(season_id)
            )"
            "create table race_results
            (
                res_id int not null,
                type varchar(20),
                ///todo DriversRaceElements
                constraint k_res_id primary key (res_id)
            )"
            "create table teams
            (
                team_id int not null,
                eng_fid int not null,
                Name varchar(40),
                Classes varchar(30),
                DefaultLivery varchar(40),
                Budget int,
                PhyInd int,
                CarHDVParams!!!//todo,
                constraint k_team_id primary key (team_id),
                constraint k_eng_id foreign key (eng_fid)
                            references eng_man(eng_id)
            )"
            "create table drivers
            (
                drv_id int not null,
                team_fid int not null,
                Name varchar(40),
                Age int,
                AchvInd int,
                SeasonNum int,
                Talent int,
                Aggression double,
                Composure double,
                Speed double,
                StartSkill double,
                MinRacingSkill double,
                constraint k_drv_id primary key (drv_id),
                constraint k_team_id foreign key (team_fid)
                        references team(team_id)
            )"
            "create table eng_man
            (
                eng_id int not null,
                Name varchar(20),
                PhyInd int,
                ClientsNum int,
                GeneralPowerMult double,
                constraint k_eng_id primary key (eng_id)
            )"
    типы: int, varchar, double(n,k), BOOLEAN(char(1))
данные считанные из файла в строковом виде
при записи в бд сделать авто перевод в нужный тип через QVariant
для записи в файл из бд сделать темплейт функцию принимающую люой параметр
    для которого есть оператор кьютекстстрима

GUI - ResultsWindow
    Две основных области область таблицы гоночных гран-при с со всеми сессиями
    ,которые раскрываются в под дереве
    вторая область результаты сессии, выбранной в первом виде с возможностью
    подробного просмотра по кругам(возможно с помощью иерархий либо отдельного окна)

    в меню возможность загрузить новые гран-при, удалить выбранные,

Championship(карьера)
	функции
		управление карьерой игрока на протяжении нескольких сезонов
	
	Содержит:
		профиль игрока
			имя, текущяя команда, стата
		список сезонов
		базу данных сезонов/гонок
		набор правил и параметров соревнований
		используемый мод
		
Season
	функции
		хранение результатов сессий по ходу одного сезона
	Содержит
		состав комаанд
		список гонок
		
	
	
				Этап 1:
	
	Модуль чемпионата, включающего в себя сезоны, собирает инфу об результатх игрока,
изменениях между сезонами и сводкой со всех сезонов. Содержит общие правил аи настройки:
	система набора очков
	
	Реализация сезона, состоящего из n-числа гонок, где n переменна, и существует
набор классов команд, внутри которых есть фиксированный набор команд для одного сезона.
Информация о сезоне(его участниках) собирается из логов отдельных гонок:
	названия мода, при инициализации(при несовпадении лог\гонка не добавляется)
	состав команд\классов
	список гонщиков и их принадлежность
	статистика выступлений
	
	составление таблиц и запись в базу данных по сезонам


/*
Veh file
    DefaultLivery
    HDVehicle
    Driver
    Team
    Engine
    Classes
    Category
HDV file
    [FRONTWING]
        FWSetting=34
        FWDragParams=(0.07432, 0.00313, 0.000012)
        FWLiftParams=(-0.2902,-0.0116, 0.000026)
    [REARWING]
        RWSetting=32
        RWDragParams=(0.08001, 0.00770, 0.000022)
        RWLiftParams=(-0.3224,-0.0141, 0.000064)
    [BODYAERO]
        BodyDragBase=(0.3112)
        RadiatorDrag
        RadiatorLift
        BrakeDuctDrag
        BrakeDuctLift
    [DIFFUSER]
        DiffuserBasePlus=(-1.2995, 0.01,0.10, 0.90) // Base lift and Half/1st/2nd order with rear ride height
        DiffuserDraftLiftMult=1.0          // Effect of draft on diffuser's lift response
        DiffuserSideways=(0.232)            // Dropoff with yaw (0.0 = none, 1.0 = max)

    [ENGINE]
        GeneralTorqueMult*=1.0
        GeneralPowerMult*=1.01141
        GeneralEngineBrakeMult*=1.0
RCD file
    ASR_F1_2018
    {
     Lance Stroll
      {
        Aggression = 50.00
        //Reputation = 50.00
        //Courtesy = 42.00
        Composure = 49.00 (if AI Mistakes is > 0 in the playerfile)
        Speed = 77.50
        //QualifySpeed = 78.5
        //WetSpeed = 55.0
        StartSkill = 92.0
        Crash = 10.50 Only used in auto completing laps
        //Recovery = 82.00
        //CompletedLaps = 86.00 Only used in auto completing laps
        MinRacingSkill = 65.50
      }
    }

 */
/*
PlayerFile
Mod
TrackVenue
Laps
Stream/Incident - parse incidents
Driver - parse list of drivers
    Name
    VehFile
    VehName
    CarType
    CarClass
    CarNumber
    TeamName
    GridPos
    Position
    ClassGridPos
    ClassPosition
    Lap - list of  lap times
    BestLapTime - double
    Pitstops
    FinishStatus
    DNFReason
*/
///////for writing files
/*
QFile test("./ASR_F1_2018.rcd");
Parser::openFile(test, QIODevice::ReadWrite);
QString data = test.readAll();
QString name = "Lance Stroll";
auto index = data.indexOf(name);
data.remove(index,name.size());
data.insert(index,"Fernando Alonso");
test.seek(0);
if(test.write(data.toUtf8()) == -1)
{
    qDebug()<<"write failed";
}
test.close();
*/
